{
  "libraryIncludes": {
    "WiFi.h": 21,
    "ESP8266WiFi.h": 19,
    "QNEthernet.h": 15,
    "WiFi101.h": 11,
    "BlynkSimpleEsp8266.h": 9,
    "SPI.h": 9,
    "WiFiNINA.h": 9,
    "WiFiClientSecure.h": 9,
    "BlynkSimpleStream.h": 8,
    "WiFiS3.h": 8,
    "WiFiC3.h": 8,
    "FirebaseClient.h": 8,
    "WiFiSSLClient.h": 8,
    "SoftwareSerial.h": 7,
    "Arduino.h": 7,
    "SPIFFS.h": 3,
    "BlynkSimpleWiFiShield101.h": 2,
    "mbedtls.h": 2,
    "Adafruit_CC3000.h": 2,
    "movingAvg.h": 2
  },
  "pinConfigurations": {
    "pin_2": {
      "pin": "2",
      "mode": "OUTPUT"
    }
  },
  "functionTemplates": {
    "setup": "Serial.begin(115200);\r\n    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);\r\n\r\n    Serial.print(\"Connecting to Wi-Fi\");\r\n    while (WiFi.status() != WL_CONNECTED)\r\n    {\r\n        Serial.print(\".\");\r\n        delay(300);",
    "loop": "// The async task handler should run inside the main loop\r\n    // without blocking delay or bypassing with millis code blocks.\r\n\r\n    // The JWT token processor required for ServiceAuth and CustomAuth authentications.\r\n    // JWT is a static object of JWTClass and it's not thread safe.\r\n    // In multi-threaded operations (multi-FirebaseApp), you have to define JWTClass for each FirebaseApp,\r\n    // and set it to the FirebaseApp via FirebaseApp::setJWTProcessor(<JWTClass>), before calling initializeApp.\r\n    JWT.loop(app.getAuth());\r\n\r\n    app.loop();\r\n\r\n    Databases.loop();\r\n\r\n    if (app.ready() && !taskCompleted)\r\n    {\r\n        taskCompleted = true;\r\n\r\n        Serial.println(\"Updates a database... \");\r\n\r\n        Firestore::Database db;\r\n        db.pointInTimeRecoveryEnablement(Firestore::PointInTimeRecoveryEnablement::POINT_IN_TIME_RECOVERY_ENABLED);\r\n\r\n        String updateMask;\r\n\r\n        Databases.patch(aClient, Firestore::Parent(FIREBASE_PROJECT_ID, \"myDb\" /* database Id */), db, updateMask, asyncCB, \"patchTask\");",
    "myTimerEvent": "// 发送数据的频率不要超过每秒10次。\n  Blynk.virtualWrite(V5, millis() / 1000);",
    "connectNetwork": "Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n  WiFi.begin(ssid, pass);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");",
    "receivePacket": "int size = udp.parsePacket();\n  if (size < 0) {\n    return;",
    "printPrompt": "printf(\"chat> \");\n  fflush(stdout);  // printf may be line-buffered, so ensure there's output",
    "sendLine": "static String line;\n\n  // Read from the console and send lines\n  if (readLine(line)) {\n    if (!udp.send(Ethernet.broadcastIP(), kPort,\n                  reinterpret_cast<const uint8_t *>(line.c_str()),\n                  line.length())) {\n      printf(\"[Error sending]\\r\\n\");",
    "drawGrid": "randomValues_t v;\n  auto cv = v.constValues;\n\n  float theta = ( M_PI / 180.0f ) * 22.5; // angle\n  float sin0 = sinf(theta);\n  float cos0 = cosf(theta);\n  float sin1 = sinf(M_PI-theta);\n  float cos1 = cosf(M_PI-theta);\n\n  for( int32_t y=-tft.height()*2; y<tft.height()*2; y+=8 ) {\n    int32_t x0Pos = -tft.width();\n    int32_t y0Pos = tft.height()-y;\n    int32_t x1Pos = tft.width();\n    int32_t y1Pos = tft.height()-y;\n    float x0 = (x0Pos * cos0 - y0Pos * sin0)+cv.middleX;\n    float y0 = (y0Pos * cos0 + x0Pos * sin0)+cv.middleY;\n    float x1 = (x1Pos * cos0 - y1Pos * sin0)+cv.middleX;\n    float y1 = (y1Pos * cos0 + x1Pos * sin0)+cv.middleY;\n    tft.drawWideLine( x0, y0, x1, y1, 0.5f, heatMapGradient ); // gradient antialiased",
    "runRandomLinesDemo": "for( int i=0;i<256;i++) {\n    randomValues_t v;\n    switch( i++%5 ) {\n      case 0: tft.drawWedgeLine( v.x0, v.y0, v.x1, v.y1, v.thickness0, v.thickness1, v.gradient888 );  break;\n      case 1: tft.drawWedgeLine( v.x0, v.y0, v.x1, v.y1, v.thickness0, v.thickness1, v.colorstart );   break;\n      case 2: tft.drawWedgeLine( v.x0, v.y0, v.x1, v.y1, v.thickness0, v.thickness1, v.color24start ); break;\n      case 3: tft.drawWedgeLine( v.x0, v.y0, v.x1, v.y1, v.thickness0, v.thickness1, v.color16start ); break;\n      case 4: tft.drawWedgeLine( v.x0, v.y0, v.x1, v.y1, v.thickness0, v.thickness1, v.color8start );  break;",
    "runGradientDemo": "drawGrid();\n\n  randomValues_t v;\n  auto cv = v.constValues;\n\n  const lgfx::rgb888_t colors888[] = { {0x00,0xff,0x00",
    "reorder": "type = ntohl(type);\n    length = ntohl(length);\n    upperFlags = ntohs(upperFlags);\n    lowerFlags = ntohs(lowerFlags);\n    versionUpper = ntohl(versionUpper);\n    versionLower = ntohl(versionLower);\n    reserved = ntohs(reserved);\n    tos = ntohs(tos);\n    rateLower = ntohl(rateLower);\n    rateUpper = ntohl(rateUpper);\n    tcpWritePrefetch = ntohl(tcpWritePrefetch);",
    "reset": "messageSize = 0;\n    bufSize = 0;\n    parseState = MessageParseState::kStart;",
    "authHandler": "// Blocking authentication handler with timeout\r\n    unsigned long ms = millis();\r\n    while (app.isInitialized() && !app.ready() && millis() - ms < 120 * 1000)\r\n    {\r\n        // The JWT token processor required for ServiceAuth and CustomAuth authentications.\r\n        // JWT is a static object of JWTClass and it's not thread safe.\r\n        // In multi-threaded operations (multi-FirebaseApp), you have to define JWTClass for each FirebaseApp,\r\n        // and set it to the FirebaseApp via FirebaseApp::setJWTProcessor(<JWTClass>), before calling initializeApp.\r\n        JWT.loop(app.getAuth());\r\n        printResult(aResult_no_callback);",
    "move": "r += dr;\n    x += dx;\n    if (x < 0) {\n      x = 0;\n      if (dx < 0) dx = - dx;",
    "restart": "Serial.println(\"Update firmware completed.\");\r\n    Serial.println();\r\n#if defined(OTA_STORAGE)\r\n    Serial.println(\"Applying update...\");\r\n    OTA_STORAGE.apply();\r\n#elif defined(ESP32) || defined(ESP8266)\r\n    Serial.println(\"Restarting...\\n\\n\");\r\n    ESP.restart();\r\n#elif defined(ARDUINO_RASPBERRY_PI_PICO_W)\r\n    Serial.println(\"Restarting...\\n\\n\");\r\n    rp2040.restart();\r\n#endif",
    "sendRequest": "Serial.println(\"Sending request...\");\n  client.writeFully(\n      \"GET / HTTP/1.1\\r\\n\"\n      \"Host: \");\n  client.writeFully(kHost);\n  client.writeFully(\n      \"\\r\\n\"\n      \"Connection: close\\r\\n\"\n      \"\\r\\n\");\n  client.flush();"
  },
  "serialConfigurations": {
    "9600": 40,
    "115200": 37
  },
  "commonKeywords": {
    "//": 893,
    "the": 504,
    "=": 359,
    "to": 359,
    "#include": 250,
    "*": 230,
    "blynk": 219,
    "and": 219,
    "http": 214,
    "this": 209,
    "{": 205,
    "is": 196,
    "in": 155,
    "#define": 154,
    "for": 152,
    "}": 135,
    "you": 123,
    "static": 119,
    "your": 114,
    "of": 114
  },
  "filePatterns": {
    "network": 57,
    "generic": 37,
    "led": 6
  },
  "sensorTypes": {
    "light": 5,
    "distance": 2
  },
  "communicationProtocols": {
    "WiFi": 38,
    "SPI": 21,
    "I2C": 1
  },
  "trainingMetrics": {
    "accuracyHistory": [],
    "valAccuracyHistory": [],
    "lossHistory": [
      7.998345375061035,
      7.208339691162109,
      6.404041767120361,
      6.3789801597595215,
      6.354597091674805,
      6.309575080871582,
      6.30170202255249,
      6.284212589263916,
      6.284999370574951,
      6.2767205238342285,
      6.278542995452881,
      6.279399871826172,
      6.271559715270996,
      6.2656097412109375,
      6.262286186218262,
      6.263748645782471,
      6.253760814666748,
      6.248908042907715,
      6.249186038970947,
      6.229140281677246,
      6.237658500671387,
      6.234024524688721,
      6.224254131317139,
      6.218521595001221,
      6.215373516082764,
      6.211741924285889,
      6.197770118713379,
      6.197671413421631,
      6.190080642700195,
      6.188692092895508,
      6.175738334655762,
      6.174600601196289,
      6.176933288574219,
      6.177764892578125,
      6.157433986663818,
      6.140140056610107,
      6.133292198181152,
      6.118302345275879,
      6.107000827789307,
      6.092031002044678,
      6.119019508361816,
      6.225948810577393,
      6.151621341705322,
      6.174588680267334,
      6.178374290466309,
      6.139550685882568,
      6.126434803009033,
      6.112597942352295,
      6.142449378967285,
      6.141994476318359,
      6.097372531890869,
      6.078240871429443,
      6.053747653961182,
      6.047837257385254,
      6.014853477478027,
      5.999546527862549,
      5.988362789154053,
      5.961733818054199,
      5.943673610687256,
      6.003734111785889,
      5.949009895324707,
      5.914534568786621,
      5.892576217651367,
      5.855464935302734,
      5.8541717529296875,
      5.819984436035156,
      5.792605876922607,
      5.766353607177734,
      5.740673542022705,
      5.712475299835205,
      5.683859348297119,
      5.676385402679443,
      5.656917095184326,
      5.626963138580322,
      5.599669456481934,
      5.574629783630371,
      5.55474328994751,
      5.531391620635986,
      5.5108819007873535,
      5.501333713531494,
      5.7630295753479,
      5.63347053527832,
      5.607996463775635,
      5.54263973236084,
      5.529098987579346,
      5.521157741546631,
      5.480556964874268,
      5.453171253204346,
      5.431578159332275,
      5.404882907867432,
      5.3874640464782715,
      5.378847122192383,
      5.358156681060791,
      5.3460211753845215,
      5.329516410827637,
      5.315133094787598,
      5.349825859069824,
      5.336068630218506,
      5.319601535797119,
      5.292903423309326
    ],
    "valLossHistory": [
      7.784937858581543,
      6.418091773986816,
      6.350622177124023,
      6.333298683166504,
      6.295966148376465,
      6.300498008728027,
      6.2911601066589355,
      6.306371212005615,
      6.326837062835693,
      6.333828449249268,
      6.336335182189941,
      6.326573371887207,
      6.326358318328857,
      6.32627010345459,
      6.317000389099121,
      6.285602569580078,
      6.278092384338379,
      6.273914813995361,
      6.2568135261535645,
      6.262773513793945,
      6.260664939880371,
      6.255185604095459,
      6.241592884063721,
      6.243374824523926,
      6.2481689453125,
      6.241857051849365,
      6.2295026779174805,
      6.221229553222656,
      6.198243141174316,
      6.189528465270996,
      6.216564655303955,
      6.22236442565918,
      6.245553493499756,
      6.221970081329346,
      6.188614845275879,
      6.152318000793457,
      6.132306098937988,
      6.107841968536377,
      6.114291191101074,
      6.096133232116699,
      6.45870304107666,
      6.139408111572266,
      6.189299583435059,
      6.2153778076171875,
      6.192044258117676,
      6.208149433135986,
      6.173312664031982,
      6.179749011993408,
      6.189563274383545,
      6.157387733459473,
      6.114684581756592,
      6.095094680786133,
      6.104437351226807,
      6.075068950653076,
      6.069213390350342,
      6.07199764251709,
      6.0281195640563965,
      5.99100399017334,
      6.019779682159424,
      5.964666843414307,
      5.958343982696533,
      5.978878021240234,
      5.908453464508057,
      5.8826189041137695,
      5.8613505363464355,
      5.821530818939209,
      5.807895660400391,
      5.794836044311523,
      5.771788120269775,
      5.7538371086120605,
      5.734954357147217,
      5.689479351043701,
      5.6634521484375,
      5.64164924621582,
      5.625734329223633,
      5.627114295959473,
      5.612506866455078,
      5.583765029907227,
      5.557644367218018,
      5.6070733070373535,
      5.659470558166504,
      5.656935214996338,
      5.580698013305664,
      5.553535461425781,
      5.540085792541504,
      5.496830940246582,
      5.481247425079346,
      5.45847225189209,
      5.435668468475342,
      5.4294233322143555,
      5.428918361663818,
      5.403985023498535,
      5.380807399749756,
      5.361169815063477,
      5.3306708335876465,
      5.384670257568359,
      5.403210639953613,
      5.341127872467041,
      5.3228349685668945,
      5.344417572021484
    ],
    "bestAccuracy": 0,
    "bestValAccuracy": 0,
    "finalLoss": 5.292903423309326,
    "finalValLoss": 5.344417572021484
  }
}