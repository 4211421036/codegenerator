{
  "vocabulary": [
    "<PAD>",
    "01HelloWorld",
    "/*************************************************************",
    "项目说明：点亮GPIO2LED",
    "硬件连接：",
    "闪灯模块连接在GPIO2管脚",
    "blynk_for_chinese 库地址：https://github.com/hznupeter/blynk-library-for-chinese",
    "Blynk物联网学习资料：https://gitee.com/hznupeter/Blynk_IOT/wikis",
    "*************************************************************/",
    "void setup()",
    "{",
    "pinMode(2, OUTPUT);",
    "}",
    "void loop()",
    "digitalWrite(2, HIGH);",
    "02BlynkBlink",
    "项目说明：控制IO电平",
    "App项目设置:",
    "创建Button组件，输出管脚设置为GPIO2,模式设为Switch",
    "#define BLYNK_PRINT Serial // 开启串口监视",
    "#include <ESP8266WiFi.h>",
    "#include <BlynkSimpleEsp8266.h>",
    "char auth[] = \"c3102448027d494ca48b27d0a732f245\";//授权码",
    "char ssid[] = \"ssid\";//wifi名称",
    "char pass[] = \"psssword\";//wifi密码",
    "Serial.begin(9600);",
    "Blynk.begin(auth, ssid, pass);//官方服务器",
    "Blynk.run();",
    "03GetData",
    "项目说明：从app获取数据",
    "创建Slider组件，输出管脚设置为V1",
    "char auth[] = \"2a365b624c0f4ea891256d4a66d428f7\";//授权码",
    "BLYNK_WRITE(V1)",
    "int pinValue = param.asInt(); // 从虚拟管脚V1获取整数",
    "Serial.print(\"V1 Slider value is: \");",
    "Serial.println(pinValue);",
    "04PushData",
    "项目说明：主动发送数据给app",
    "创建value display组件，输入管脚设置为V5",
    "BlynkTimer timer;",
    "void myTimerEvent()",
    "Blynk.virtualWrite(V5, millis() / 1000);",
    "timer.setInterval(1000L, myTimerEvent);//每隔1000毫秒执行一次myTimerEvent函数",
    "timer.run(); //初始化定时器",
    "ATtiny85",
    "Download latest Blynk library here:",
    "https://github.com/blynkkk/blynk-library/releases/latest",
    "Blynk is a platform with iOS and Android apps to control",
    "Arduino, Raspberry Pi and the likes over the Internet.",
    "You can easily build graphic interfaces for all your",
    "projects by simply dragging and dropping widgets.",
    "Downloads, docs, tutorials: http://www.blynk.cc",
    "Sketch generator:           http://examples.blynk.cc",
    "Blynk community:            http://community.blynk.cc",
    "Follow us:                  http://www.fb.com/blynkapp",
    "http://twitter.com/blynk_app",
    "Blynk library is licensed under MIT license",
    "This example code is in public domain.",
    "*************************************************************",
    "=>",
    "=>          USB HOWTO: http://tiny.cc/BlynkUSB",
    "Note: This requires ATtiny support package:",
    "https://github.com/damellis/attiny",
    "Be sure to check ordinary Serial example first!!!",
    "+-\\/-+",
    "A0|6 (D 5) PB5  1|    |8  Vcc",
    "A3|9 (D 3) PB3  2|    |7  PB2 (D 2) A1|7",
    "A2|8 (D 4) PB4  3|    |6  PB1 (D 1) pwm1",
    "GND  4|    |5  PB0 (D 0) pwm0",
    "+----+",
    "#include <SoftwareSerial.h>",
    "SoftwareSerial DebugSerial(1, 2); // RX, TX",
    "SoftwareSerial SwSerial(3, 4);",
    "/* Comment this out to disable prints and save space */",
    "#define BLYNK_PRINT DebugSerial",
    "#include <BlynkSimpleStream.h>",
    "char auth[] = \"YourAuthToken\";",
    "DebugSerial.begin(9600);",
    "SwSerial.begin(9600);",
    "Blynk.begin(SwSerial, auth);",
    "Adafruit_Feather_M0_WiFi",
    "This example shows how to use Adafruit Feather M0 WiFi",
    "to connect your project to Blynk.",
    "Note: This requires WiFi101 library",
    "from http://librarymanager/all#WiFi101",
    "Feel free to apply it to any other example. It's simple!",
    "#define BLYNK_PRINT Serial",
    "#include <WiFi101.h>",
    "#include <BlynkSimpleWiFiShield101.h>",
    "char ssid[] = \"YourNetworkName\";",
    "char pass[] = \"YourPassword\";",
    "WiFi.setPins(8, 7, 4, 2);",
    "Blynk.begin(auth, ssid, pass);",
    "Arduino_Ethernet",
    "Project setup in the Blynk app:",
    "Value Display widget on V2",
    "NOTE: Pins 10, 11, 12 and 13 are reserved for Ethernet module.",
    "DON'T use them in your sketch directly!",
    "WARNING: If you have an SD card, you may need to disable it",
    "by setting pin 4 to HIGH. Read more here:",
    "https://www.arduino.cc/en/Main/ArduinoEthernetShield",
    "#include <SPI.h>",
    "#include <Ethernet.h>",
    "const char auth[] = \"YourAuthToken\";",
    "const char* host = \"blynk-cloud.com\";",
    "unsigned int port = 8080;",
    "byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };",
    "EthernetClient client;",
    "#define W5100_CS  10",
    "#define SDCARD_CS 4",
    "void connectNetwork()",
    "Serial.println(\"Connecting to Ethernet...\");",
    "pinMode(SDCARD_CS, OUTPUT);",
    "digitalWrite(SDCARD_CS, HIGH); // Deselect the SD card",
    "if (Ethernet.begin(mac) == 0) {",
    "Serial.println(\"Failed to configure Ethernet using DHCP\");",
    "while (true);",
    "delay(1000);",
    "Serial.println(\"Ethernet connected\");",
    "bool httpRequest(const String& method,",
    "const String& request,",
    "String&       response)",
    "Serial.print(F(\"Connecting to \"));",
    "Serial.print(host);",
    "Serial.print(\":\");",
    "Serial.print(port);",
    "Serial.print(\"... \");",
    "if (client.connect(host, port)) {",
    "Serial.println(\"OK\");",
    "} else {",
    "Serial.println(\"failed\");",
    "return false;",
    "client.print(method); client.println(F(\" HTTP/1.1\"));",
    "client.print(F(\"Host: \")); client.println(host);",
    "client.println(F(\"Connection: close\"));",
    "if (request.length()) {",
    "client.println(F(\"Content-Type: application/json\"));",
    "client.print(F(\"Content-Length: \")); client.println(request.length());",
    "client.println();",
    "client.print(request);",
    "int timeout = millis() + 5000;",
    "while (client.available() == 0) {",
    "if (timeout - millis() < 0) {",
    "Serial.println(\">>> Client Timeout !\");",
    "client.stop();",
    "int contentLength = -1;",
    "while (client.available()) {",
    "String line = client.readStringUntil('\\n');",
    "line.trim();",
    "line.toLowerCase();",
    "if (line.startsWith(\"content-length:\")) {",
    "contentLength = line.substring(line.lastIndexOf(':') + 1).toInt();",
    "} else if (line.length() == 0) {",
    "break;",
    "response = \"\";",
    "response.reserve(contentLength + 1);",
    "while (response.length() < contentLength && client.connected()) {",
    "char c = client.read();",
    "response += c;",
    "return true;",
    "Arduino_GSM",
    "#include <GSM.h>",
    "#define PINNUMBER \"\"",
    "#define GPRS_APN       \"GPRS_APN\" // replace your GPRS APN",
    "#define GPRS_LOGIN     \"login\"    // replace with your GPRS login",
    "#define GPRS_PASSWORD  \"password\" // replace with your GPRS password",
    "GSMClient client;",
    "GPRS gprs;",
    "GSM gsmAccess;",
    "Serial.println(\"Connecting to GSM...\");",
    "bool status = false;",
    "while (status == false) {",
    "if ((gsmAccess.begin(PINNUMBER) == GSM_READY) &",
    "(gprs.attachGPRS(GPRS_APN, GPRS_LOGIN, GPRS_PASSWORD) == GPRS_READY)) {",
    "status = true;",
    "Serial.print(\".\");",
    "Serial.println();",
    "Serial.println(\"GSM connected\");",
    "Arduino_MKR1000",
    "This example shows how to use Arduino MKR1000",
    "#include <BlynkSimpleMKR1000.h>",
    "Arduino_MKR1010",
    "This example shows how to use Arduino MKR 1010",
    "Note: This requires WiFiNINA library",
    "from http://librarymanager/all#WiFiNINA",
    "#include <WiFiNINA.h>",
    "#include <BlynkSimpleWiFiNINA.h>",
    "Arduino_Serial_USB",
    "SoftwareSerial DebugSerial(2, 3); // RX, TX",
    "Blynk.begin(Serial, auth);",
    "Arduino_SoftwareSerial",
    "SoftwareSerial SwSerial(2, 3); // RX, TX",
    "Arduino_WiFi_Shield",
    "This example shows how to use Arduino WiFi shield",
    "Please update your shield firmware:",
    "https://www.arduino.cc/en/Hacking/WiFiShieldFirmwareUpgrading",
    "#include <WiFi.h>",
    "#include <BlynkSimpleWifi.h>",
    "Arduino_WiFi_Shield_101",
    "This example shows how to use Arduino WiFi 101 shield",
    "Arduino_Yun",
    "This example shows how to use Arduino Yun Bridge",
    "#include <Bridge.h>",
    "#include <BlynkSimpleYun.h>",
    "Blynk.begin(auth);",
    "Arduino_Zero_M0_Serial",
    "Social networks:            http://www.fb.com/blynkapp",
    "#define BLYNK_PRINT SerialUSB",
    "SerialUSB.begin(9600);",
    "Arduino_org_UNO_WiFi",
    "This example shows how to use Arduino.org UNO WiFi",
    "Note: This requires WiFi Link library",
    "from http://librarymanager/all#WiFi_Link",
    "Please update your UNO WiFi firmware to WiFiLink 1.0.0 (at least).",
    "#include <WiFiLink.h>",
    "#include <BlynkSimpleWiFiLink.h>",
    "Blue_Pill_STM32F103C",
    "Note: This requires STM32duino support package:",
    "https://github.com/rogerclarkmelbourne/Arduino_STM32/wiki/Installation",
    "Note: You may need to wait up to 30 seconds after board starts,",
    "to allow USB serial to initialize completely.",
    "#define BLYNK_PRINT Serial1",
    "Serial1.begin(9600);",
    "CC3000",
    "This example shows how to use Adafruit CC3000 breakout",
    "For this example you need Adafruit_CC3000_Library library:",
    "https://github.com/adafruit/Adafruit_CC3000_Library",
    "Note: Firmware version 1.14 or later is preferred.",
    "1. Update pin definitions according to your setup.",
    "2. Change WiFi ssid, pass, and Blynk auth token",
    "3. Run :)",
    "#define ADAFRUIT_CC3000_IRQ   3",
    "#define ADAFRUIT_CC3000_VBAT  5",
    "#define ADAFRUIT_CC3000_CS    10",
    "#include <Adafruit_CC3000.h>",
    "#include <BlynkSimpleCC3000.h>",
    "int wifi_sec = WLAN_SEC_WPA2;",
    "Blynk.begin(auth, ssid, pass, wifi_sec);",
    "Digistump_Digispark",
    "There is an USB issue on Linux:",
    "https://github.com/digistump/DigistumpArduino/issues/16",
    "#if !defined(ARDUINO_AVR_DIGISPARKPRO)",
    "#define BLYNK_NO_INFO",
    "#define BLYNK_NO_BUILTIN",
    "#endif",
    "#include <DigiCDC.h>",
    "SerialUSB.begin();",
    "Blynk.begin(SerialUSB, auth);",
    "Digistump_Oak",
    "This example shows how to use Digistump Oak with Blynk.",
    "Please be sure to select the right board type",
    "in the Tools -> Board menu!",
    "Change Blynk auth token to run :)",
    "Blynk.config(auth);",
    "ESP32_WiFi",
    "This example runs directly on ESP32 chip.",
    "Note: This requires ESP32 support package:",
    "https://github.com/espressif/arduino-esp32",
    "Please be sure to select the right ESP32 module",
    "Change WiFi ssid, pass, and Blynk auth token to run :)",
    "#include <WiFiClient.h>",
    "#include <BlynkSimpleEsp32.h>",
    "ESP32_WiFi_SSL",
    "#include <WiFiClientSecure.h>",
    "#include <BlynkSimpleEsp32_SSL.h>",
    "ESP8266",
    "const char ssid[] = \"YourWiFi\";",
    "const char pass[] = \"YourPassword\";",
    "WiFiClient client;",
    "Serial.print(\"Connecting to \");",
    "Serial.println(ssid);",
    "WiFi.begin(ssid, pass);",
    "while (WiFi.status() != WL_CONNECTED) {",
    "delay(500);",
    "Serial.println(\"WiFi connected\");",
    "delay(10);",
    "connectNetwork();",
    "void loop() {",
    "String response;",
    "ESP8266_Shield",
    "This example shows how to use ESP8266 Shield (with AT commands)",
    "WARNING!",
    "It's very tricky to get it working. Please read this article:",
    "http://help.blynk.cc/hardware-and-libraries/arduino/esp8266-with-at-firmware",
    "#include <ESP8266_Lib.h>",
    "#include <BlynkSimpleShieldEsp8266.h>",
    "#define EspSerial Serial1",
    "#define ESP8266_BAUD 115200",
    "ESP8266 wifi(&EspSerial);",
    "EspSerial.begin(ESP8266_BAUD);",
    "Blynk.begin(auth, wifi, ssid, pass);",
    "ESP8266_Standalone",
    "This example runs directly on ESP8266 chip.",
    "Note: This requires ESP8266 support package:",
    "https://github.com/esp8266/Arduino",
    "Please be sure to select the right ESP8266 module",
    "ESP8266_Standalone_Manual_IP",
    "byte arduino_mac[] = { 0xDE, 0xED, 0xBA, 0xFE, 0xFE, 0xED };",
    "IPAddress device_ip  (192, 168,   0,  80);",
    "IPAddress dns_ip     (  8,   8,   8,   8);",
    "IPAddress gateway_ip (192, 168,   0,   1);",
    "IPAddress subnet_mask(255, 255, 255,   0);",
    "WiFi.config(device_ip, gateway_ip, subnet_mask);",
    "while (Blynk.connect() == false) {",
    "ESP8266_Standalone_SSL",
    "#include <BlynkSimpleEsp8266_SSL.h>",
    "ESP8266_Standalone_SmartConfig",
    "NOTE: SmartConfig might not work in your environment.",
    "Please try basic ESP8266 SmartConfig examples",
    "before using this sketch!",
    "WiFi.mode(WIFI_STA);",
    "int cnt = 0;",
    "if (cnt++ >= 10) {",
    "WiFi.beginSmartConfig();",
    "while (1) {",
    "if (WiFi.smartConfigDone()) {",
    "Serial.println(\"SmartConfig: Success\");",
    "Serial.print(\"|\");",
    "WiFi.printDiag(Serial);",
    "Energia_Serial_USB",
    "Requires Energia IDE: http://energia.nu/download/",
    "Energia_WiFi",
    "This example shows how to use Energia with WiFi",
    "to connect your project to Blynk. Tested with:",
    "TI MSP430F5529 + CC3100",
    "TI CC3200-LaunchXL",
    "RedBearLab CC3200",
    "RedBearLab WiFi Mini w/ CC3200",
    "RedBearLab WiFi Micro w/ CC3200",
    "#include <BlynkSimpleEnergiaWiFi.h>",
    "Fishino",
    "This example shows how to use Fishino to connect your project to Blynk.",
    "Note: This requires Fishino Software libraries:",
    "http://fishino.it/en/download/",
    "#include <Fishino.h>",
    "#include <BlynkSimpleFishino.h>",
    "Intel_Edison_WiFi",
    "This is an example for Intel Edison (WiFi).",
    "#include <BlynkSimpleIntelEdisonWiFi.h>",
    "LinkItONE",
    "This example shows how to use LinkItONE to connect your project to Blynk.",
    "#include <LWiFi.h>",
    "#include <LWiFiClient.h>",
    "#include <BlynkSimpleLinkItONE.h>",
    "int wifi_sec = LWIFI_WPA;",
    "NodeMCU",
    "This example runs directly on NodeMCU.",
    "Please be sure to select the right NodeMCU module",
    "For advanced settings please follow ESP examples :",
    "- ESP8266_Standalone_Manual_IP.ino",
    "- ESP8266_Standalone_SmartConfig.ino",
    "- ESP8266_Standalone_SSL.ino",
    "RN_XV_WiFly",
    "This example shows how to use WiFly RN-XV",
    "For this example you need WiFlyHQ library:",
    "https://github.com/harlequin-tech/WiFlyHQ",
    "Note: Ensure a stable serial connection!",
    "Hardware serial is preferred.",
    "Firmware version 4.41 or later is preferred.",
    "#include <WiFlyHQ.h>",
    "#include <BlynkSimpleWiFly.h>",
    "#define WiFlySerial Serial1",
    "WiFly wifly;",
    "WiFlySerial.begin(9600);  // Set your RN-XV baud rate",
    "if (!wifly.begin(&WiFlySerial)) {",
    "BLYNK_FATAL(\"Failed to start wifly\");",
    "Blynk.begin(auth, wifly, ssid, pass);",
    "RedBear_Duo_WiFi",
    "This example shows how to use RedBear Duo",
    "#include <BlynkSimpleRedBear_Duo.h>",
    "int wifi_sec = WPA2;",
    "SYSTEM_MODE(MANUAL);",
    "delay(5000);",
    "WiFi.on();",
    "WiFi.setCredentials(ssid, pass, wifi_sec);",
    "WiFi.connect();",
    "SIM800_SIM900",
    "Attention!",
    "1. Using your phone:",
    "Disable PIN code on the SIM card",
    "Check your ballance",
    "Check that APN,User,Pass are correct and you have internet",
    "2. Ensure the sim card is correctly inserted into the module",
    "3. Provide a good, stable power supply (up to 2A)",
    "(4.0-4.2V or 5V according to your module documentation)",
    "4. Provide good serial connection",
    "(Hardware Serial is recommended)",
    "5. Check if GSM antenna is attached",
    "#define GPRS_APN       \"YourAPN\"    // Replace your GPRS APN",
    "#define GPRS_USER      \"\"           // Replace with your GPRS user",
    "#define GPRS_PASSWORD  \"\"           // Replace with your GPRS password",
    "Stream* stream = &Serial1;",
    "bool gprsInit();",
    "bool gprsConnect();",
    "bool gprsDisconnect();",
    "Serial1.begin(115200);",
    "delay(3000);",
    "gprsInit();",
    "gprsConnect();",
    "unsigned long value = millis();",
    "Serial.print(\"Sending value: \");",
    "Serial.println(value);",
    "if (httpRequest(\"GET\", String(\"/\") + auth + \"/update/V2?value=\" + value, \"\", response)) {",
    "if (response.length() != 0) {",
    "Serial.print(\"WARNING: \");",
    "Serial.println(response);",
    "Serial.println(\"Reading value\");",
    "if (httpRequest(\"GET\", String(\"/\") + auth + \"/get/V2\", \"\", response)) {",
    "Serial.print(\"Value from server: \");",
    "Serial.println(\"Setting property\");",
    "if (httpRequest(\"GET\", String(\"/\") + auth + \"/update/V2?label=\" + value, \"\", response)) {",
    "gprsDisconnect();",
    "Serial.println(\"Waiting 1 minute...\");",
    "delay(60000L);",
    "/**************************************************************",
    "* AT commands stuff",
    "**************************************************************/",
    "typedef const __FlashStringHelper* GsmConstStr;",
    "void sendAT(const String& cmd) {",
    "stream->print(\"AT\");",
    "stream->println(cmd);",
    "uint8_t waitResponse(uint32_t timeout, GsmConstStr r1,",
    "GsmConstStr r2 = NULL, GsmConstStr r3 = NULL)",
    "String data;",
    "data.reserve(64);",
    "int index = 0;",
    "for (unsigned long start = millis(); millis() - start < timeout; ) {",
    "while (stream->available() > 0) {",
    "int c = stream->read();",
    "if (c < 0) continue;",
    "data += (char)c;",
    "if (data.indexOf(r1) >= 0) {",
    "index = 1;",
    "goto finish;",
    "} else if (r2 && data.indexOf(r2) >= 0) {",
    "index = 2;",
    "Sparkfun_Blynk_Board",
    "This example runs on Sparkfun Blynk Board.",
    "You can select NodeMCU 1.0 (compatible board)",
    "in the Tools -> Board menu",
    "Teensy3",
    "Template_ESP32",
    "This is a DEMO. You can use it only for development and testing.",
    "You should open Setting.h and modify General options.",
    "If you would like to add these features to your product,",
    "please contact Blynk for Businesses:",
    "http://www.blynk.io/",
    "#define USE_CUSTOM_BOARD          // See \"Custom board configuration\" in Settings.h",
    "#define APP_DEBUG        // Comment this out to disable debug prints",
    "#include \"BlynkProvisioning.h\"",
    "void setup() {",
    "Serial.begin(115200);",
    "BlynkProvisioning.begin();",
    "BlynkProvisioning.run();",
    "Template_ESP8266",
    "#define USE_SPARKFUN_BLYNK_BOARD    // Uncomment the board you are using",
    "Template_MKR1000",
    "This example requires some additional libraries:",
    "https://github.com/cmaglie/FlashStorage",
    "https://github.com/michael71/Timer5",
    "#define USE_MKR1000_BOARD",
    "TheAirBoard_WiFly",
    "This example shows how to use AirBoard + RN-XV WiFly module",
    "Note: Be sure to read this: http://www.theairboard.cc/quick-start/",
    "WiFly firmware version 4.41 or later is preferred.",
    "SoftwareSerial DebugSerial(10, 11); // RX, TX",
    "#include <TheAirBoard.h>",
    "#define WiFlySerial Serial",
    "TinyDuino_WiFi",
    "This example shows how to use TinyCircuits CC3000 shield",
    "Tools->Board     should be \"Arduino Pro or Pro Mini\"",
    "Tools->Processor should be \"ATmega 328 (3.3V, 8MHz)\"",
    "#include <BlynkSimpleTinyDuino.h>",
    "WildFire_V3",
    "This example shows how to use CC3000 on WildFire board",
    "Note: You need to install Arduino IDE WildFire support:",
    "http://shop.wickeddevice.com/resources/wildfire/",
    "#include <WildFire.h>",
    "#include <WildFire_CC3000.h>",
    "#include <BlynkSimpleWildFire.h>",
    "WildFire wildfire;",
    "wildfire.begin();",
    "WildFire_V4",
    "This example shows how to use WildFire V4",
    "const int EspSwitch =  23;",
    "ESP8266 wifi(&Serial1);",
    "pinMode(EspSwitch, OUTPUT);",
    "digitalWrite(EspSwitch, LOW);",
    "delay(50);",
    "digitalWrite(EspSwitch, HIGH);",
    "WizFi310",
    "This example shows how to use WizFi310",
    "Note: This requires WizFi310 library",
    "from http://librarymanager/all#WizFi310",
    "#include <WizFi310.h>",
    "#include <BlynkSimpleWizFi310.h>",
    "chipKIT_Uno32",
    "myPlant_ESP8266",
    "This is a DEMO sketch which works with Blynk myPlant app and",
    "showcases how your app made with Blynk can work",
    "You can download free app here:",
    "iOS:     https://itunes.apple.com/us/app/blynk-myplant/id1163620518?mt=8",
    "Android: https://play.google.com/store/apps/details?id=cc.blynk.appexport.demo",
    "*",
    "* Workflow to connect the device to WiFi network.",
    "* Here is how it works:",
    "* 1. At the first start hardware acts as an Access Point and",
    "*    broadcasts it's own WiFi.",
    "* 2. myPlant smartphone app connects to this Access Point",
    "* 3. myPlant smartphone app request new Auth Token and passes",
    "*    it together with user's WiFi SSID and password",
    "* 4. Hardware saves this information to EEPROM",
    "* 5. Hardware reboots and now connects to user's WiFi Network",
    "* 6. Hardware connects to Blynk Cloud and is ready to work with app",
    "* Next time the hardware reboots, it will use the same configuration",
    "* to connect. User can RESET the board and re-initiate provisioning",
    "* Explore the Settings.h for parameters",
    "example_init(); // Initialize this example",
    "example_run();",
    "*              myPlant example App code",
    "* The following code simulates plant watering system",
    "BlynkTimer timer; // Initiating timer to perform repeating event",
    "static int sensorSoilMoisture = 60;",
    "static int sensorAirHumidity = 50;",
    "static int wateringAmount = 5;",
    "static int wateringTimer = -1;",
    "static bool isNotificationSent = false;",
    "BLYNK_WRITE(V5) {",
    "wateringAmount = param.asInt();",
    "DEBUG_PRINT(String(\"Watering amount: \") + wateringAmount);",
    "BLYNK_WRITE(V6) {",
    "if (param.asInt() == 1) {",
    "timer.enable(wateringTimer);",
    "DEBUG_PRINT(\"Watering started by user\");",
    "timer.disable(wateringTimer);",
    "DEBUG_PRINT(\"Watering stopped by user\");",
    "BLYNK_CONNECTED() {",
    "Blynk.syncVirtual(V5, V6);",
    "float sinusoidal(float minv, float maxv, float period) {",
    "float amp = (maxv - minv) / 2.0;",
    "float med = minv + amp;",
    "return med + amp * sin((M_PI * 2 * millis()) / period);",
    "float randomize(float minv, float maxv) {",
    "return float(random(minv * 1000, maxv * 1000)) / 1000;",
    "void example_init() {",
    "timer.setInterval(3000L, []() {",
    "if (sensorSoilMoisture < 33) {",
    "Blynk.virtualWrite(V1, \"DRY\");",
    "} else if (sensorSoilMoisture > 33) {",
    "Blynk.virtualWrite(V1, \"MOIST\");",
    "Blynk.virtualWrite(V1, \"WET\");",
    "float dayPeriod = 3.0 * 60 * 1000;",
    "int light = sinusoidal(5, 95, dayPeriod);",
    "if (light < 33) {",
    "Blynk.virtualWrite(V2, \"LOW\");",
    "} else if (light > 33) {",
    "Blynk.virtualWrite(V2, \"GOOD\");",
    "Blynk.virtualWrite(V2, \"MED\");",
    "Blynk.virtualWrite(V3, sinusoidal(18, 23, dayPeriod) + randomize(-1.0, 1.0));",
    "});"
  ],
  "total_tokens": 560
}